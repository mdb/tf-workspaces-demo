name: Terraform

on:
  pull_request:
  push:
    branch: main

jobs:
  set-up:
    runs-on: ubuntu-latest
    outputs:
      workspaces: ${{ steps.set-matrix.outputs.workspaces }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Start and bootstrap localstack mock AWS environment
        run: make up

        # actions/upload-artifact does not preserve the necessary
        # localstack-data file permissions. Tarring the localstack-data
        # directory offers a workaround.
      - name: Tar localstack-data to preserve file permissions
        run: tar -cvf localstack-data.tar localstack-data

      - name: Upload localstack data for use in subsequent jobs
        uses: actions/upload-artifact@v3
        with:
          name: localstack-data
          path: localstack-data.tar
          if-no-files-found: error
          retention-days: 1

      - name: Set Terraform workspaces matrix
        id: set-matrix
        run: echo "workspaces=$(jq -c . < ./workspaces.json)" >> $GITHUB_OUTPUT

  terraform-plan:
    runs-on: ubuntu-latest
    needs: set-up
    strategy:
      matrix: ${{ fromJson(needs.set-up.outputs.workspaces) }}
      # NOTE: Because the steps in this workflow each write to the same localstack
      # S3 bucket and persist the results via @actions/upload, it's necessary to
      # prevent race conditions by imposing restrictions on parallelism.
      # A real-world workflow would likely not restrict parallelism.
      max-parallel: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine localstack-data artifact name generated from previous jobs
        uses: actions/github-script@v7
        id: localstack-data-artifact-name
        with:
          script: |
            const jobIndex = ${{ strategy.job-index }};
            return jobIndex === 0 ? 'localstack-data' : `localstack-data-${ jobIndex - 1}`
          result-encoding: string

      - name: Download persisted localstack data generated from previous jobs
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.localstack-data-artifact-name.outputs.result }}
          path: localstack-data-tar

      - name: Untar localstack data to localstack-data
        run: |
          tar xf localstack-data-tar/${{ steps.localstack-data-artifact-name.outputs.result }}.tar --directory .
          if [ [ "${{ steps.localstack-data-artifact-name.outputs.result }}" != "localstack-data" ]]; then
            mv ${{ steps.localstack-data-artifact-name.outputs.result }} localstack-data
          fi

      - name: Start localstack mock AWS environment
        run: make start-localstack

      - name: Set up tfenv
        uses: rhythmictech/actions-setup-tfenv@v0.1.2

      - name: Verify presence of localstack S3 bucket
        run: curl --fail http://localhost.localstack.cloud:4566/tf-workspaces-demo

      - name: Terraform plan ${{ matrix.workspace }}
        run: make plan WORKSPACE=${{ matrix.workspace }}

      - name: Show Terraform state at ${{ matrix.workspace }}-specific S3 endpoint
        run: curl "http://localhost.localstack.cloud:4566/tf-workspaces-demo/env:/${{ matrix.workspace }}/terraform.tfstate"

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.workspace }}
          path: ${{ matrix.workspace }}.plan
          if-no-files-found: ignore
          retention-days: 1

      - name: Determine if this is the last build in the matrix
        uses: actions/github-script@v7
        id: is-final-matrix-build
        with:
          script: return ${{ strategy.job-total }} === (${{ strategy.job-index }} + 1)
          result-encoding: string

        # actions/upload-artifact does not preserve the necessary
        # localstack-data file permissions. Tarring the localstack-data
        # directory offers a workaround.
      - name: Tar localstack-data to preserve file permissions
        run: tar -cvf localstack-data-${{ strategy.job-index }}.tar localstack-data

      - name: Upload localstack data for use in subsequent jobs
        uses: actions/upload-artifact@v3
        with:
          name: localstack-data-${{ strategy.job-index }}
          path: localstack-data-${{ strategy.job-index }}.tar
          if-no-files-found: error
          retention-days: 1

  terraform-apply:
    runs-on: ubuntu-latest
    needs: [set-up, terraform-plan]
    strategy:
      matrix: ${{ fromJson(needs.set-up.outputs.workspaces) }}
      # NOTE: Because the steps in this workflow each write to the same localstack
      # S3 bucket and persist the results via @actions/upload, it's necessary to
      # prevent race conditions by imposing restrictions on parallelism.
      # A real-world workflow would likely not restrict parallelism.
      max-parallel: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up tfenv
        uses: rhythmictech/actions-setup-tfenv@v0.1.2

      - name: Determine final localstack data artifact name generated from prior jobs
        uses: actions/github-script@v7
        id: final-localstack-data-artifact-name
        with:
          script: |
            const suffix = ${{ strategy.job-total }} - 1
            return `localstack-data-${suffix}`
          result-encoding: string

      - name: Download final localstack data generated from prior jobs
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.final-localstack-data-artifact-name.outputs.result }}
          path: localstack-data-tar

      - name: Untar localstack data to localstack-data
        run: tar xf localstack-data-tar/${{ steps.final-localstack-data-artifact-name.outputs.result }}.tar --directory .

      - name: Start localstack mock AWS environment
        run: make start-localstack

      - name: Verify localstack-data in localstack container
        run: docker compose exec -T localstack ls -R /persisted-data

      - name: Sleep for 1 minute to wait for localstack data availability
        run: sleep 60

      - name: Verify ${{ matrix.workspace }} workspace exists in s3://tf-workspaces-demo
        run: curl --fail http://localhost.localstack.cloud:4566/tf-workspaces-demo/env:/${{ matrix.workspace }}/terraform.tfstate

      - name: Download Terraform plan
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.workspace }}

      - name: Terraform apply ${{ matrix.workspace }}
        run: make apply WORKSPACE="${{ matrix.workspace }}"

      - name: Show Terraform state at ${{ matrix.workspace }}-specific S3 endpoint
        run: curl http://localhost.localstack.cloud:4566/tf-workspaces-demo/env:/${{ matrix.workspace }}/terraform.tfstate
